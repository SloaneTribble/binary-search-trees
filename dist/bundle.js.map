{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAE2C;;;;;;;;;;;;;;;;;AClF3C;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEwC;;;;;;;;;;;;;;;;;;AC/CV;;AAEE;;AAEhC;AACA;AACA,WAAW,2CAAI;AACf;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM,6CAAI;AACV;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA,MAAM;AACN;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEoC;;;;;;;;;;;;;;;AC5DpC;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEqB;;;;;;;;;;;;;;;ACpCrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEgB;;;;;;;;;;;;;;;;;;AC7ByB;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,sDAAS;AAC7B;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEiC;;;;;;;UCvCjC;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACN6D;;AAE/B;;AAE6B;;AAE3B;;AAEkC;;AAElE;AACA,8BAA8B,KAAK;AACnC;;AAEA;;AAEA,gBAAgB,2CAAI;;AAEpB;;AAEA,YAAY,sDAAQ;;AAEpB,YAAY,qDAAO;;AAEnB,YAAY,uDAAS;;AAErB;;AAEA,sDAAQ;;AAER,2DAAW;;AAEX,sDAAQ;;AAER;;AAEA,0DAAU;;AAEV,mEAAmB","sources":["webpack://binary-search-trees/./src/breadth-first.js","webpack://binary-search-trees/./src/depth-first.js","webpack://binary-search-trees/./src/insert-delete.js","webpack://binary-search-trees/./src/merge-sort.js","webpack://binary-search-trees/./src/search.js","webpack://binary-search-trees/./src/tree.js","webpack://binary-search-trees/webpack/bootstrap","webpack://binary-search-trees/webpack/runtime/define property getters","webpack://binary-search-trees/webpack/runtime/hasOwnProperty shorthand","webpack://binary-search-trees/webpack/runtime/make namespace object","webpack://binary-search-trees/./src/index.js"],"sourcesContent":["/**\n * Accept a root and another function as parameters\n * Traverse the tree in breadth-first level order and pass each node as an\n * argument to the provided function.\n *\n * If no function is given, return an array of values.\n *\n * Use a queue to keep track of child nodes to be traversed.\n */\n\n// push() to add element to end of array (enqueue)\n// shift() to remove element from beginning of array (dequeue)\n\nconst basic = function defaultCallBack(node, array) {\n  array.push(node.data);\n};\n\nconst levelOrder = function levelOrderTraverse(root, callBack) {\n  if (root === null) {\n    return;\n  }\n\n  if (!callBack) {\n    callBack = basic;\n  }\n\n  // Only used if no callback is provided\n  let traversal = [];\n\n  let queue = [];\n  queue.push(root);\n\n  while (queue.length > 0) {\n    let current = queue.shift();\n    callBack(current, traversal);\n\n    if (current.left != null) {\n      queue.push(current.left);\n    }\n    if (current.right != null) {\n      queue.push(current.right);\n    }\n  }\n\n  if (callBack == basic) {\n    return traversal;\n  }\n};\n\nconst levelOrderRecursive = function recursiveLevelOrderTraverse(\n  root,\n  callBack\n) {\n  if (!callBack) {\n    callBack = basic;\n  }\n  let traversal = [];\n  let queue = [];\n  queue.push(root);\n  recursiveComponent(queue, callBack, traversal);\n};\n\nconst recursiveComponent = function recursion(queue, callBack, array) {\n  if (queue.length === 0) {\n    // If no callback was provided, an array was generated\n    if (array.length > 0) {\n      // console.log(array);\n    }\n    return;\n  }\n\n  let currentNode = queue.shift();\n  callBack(currentNode, array);\n  if (currentNode.left) {\n    queue.push(currentNode.left);\n  }\n  if (currentNode.right) {\n    queue.push(currentNode.right);\n  }\n  recursiveComponent(queue, callBack, array);\n};\n\nexport { levelOrder, levelOrderRecursive };\n","const preOrder = function preOrderTraversal(node, callBack, arr = []) {\n  if (node == null) {\n    return;\n  }\n  if (!callBack) {\n    arr.push(node.data);\n  } else {\n    callBack(node.data);\n  }\n  preOrder(node.left, callBack, arr);\n  preOrder(node.right, callBack, arr);\n\n  return arr;\n};\n\nconst inOrder = function inOrderTraversal(node, callBack, arr = []) {\n  if (node === null) {\n    return;\n  }\n  inOrder(node.left, callBack, arr);\n\n  if (!callBack) {\n    arr.push(node.data);\n  } else {\n    callBack(node.data);\n  }\n  inOrder(node.right, callBack, arr);\n\n  return arr;\n};\n\nconst postOrder = function postOrderTraversal(node, callBack, arr = []) {\n  if (node === null) {\n    return;\n  }\n  postOrder(node.left, callBack, arr);\n  postOrder(node.right, callBack, arr);\n\n  if (!callBack) {\n    arr.push(node.data);\n  } else {\n    callBack(node.data);\n  }\n\n  return arr;\n};\n\nexport { preOrder, inOrder, postOrder };\n","import { node } from \"./tree\";\n\nimport { find } from \"./search\";\n\nconst addValue = function addLeafToTree(root, value) {\n  if (root == null) {\n    root = node(value);\n  }\n\n  if (value < root.data) {\n    root.left = addValue(root.left, value);\n  } else if (value > root.data) {\n    root.right = addValue(root.right, value);\n  }\n\n  return root;\n};\n\nconst insertValue = function checkForDupsThenInsert(root, value) {\n  // Must avoid duplicates to prevent complications\n  if (find(root, value) === \"Not found\") {\n    addValue(root, value);\n  } else {\n    return \"Cannot add duplicates\";\n  }\n};\n\nconst deleteValue = function removeNodeFromTree(root, value) {\n  if (root == null) {\n    return root;\n  }\n  if (value < root.data) {\n    root.left = deleteValue(root.left, value);\n  } else if (value > root.data) {\n    root.right = deleteValue(root.right, value);\n  } else {\n    if (root.left == null) {\n      return root.right;\n    } else if (root.right == null) {\n      return root.left;\n    }\n\n    root.data = minValue(root.right);\n\n    root.right = deleteValue(root.right, root.data);\n  }\n\n  return root;\n};\n\nconst minValue = function findMinValue(root) {\n  let minV = root.data;\n\n  while (root.left != null) {\n    minV = root.left.data;\n    root = root.left;\n  }\n  return minV;\n};\n\nexport { insertValue, deleteValue };\n","const merge = function mergeLeftAndRight(left, right) {\n  let result = [];\n  while (left.length > 0 && right.length > 0) {\n    if (left[0] < right[0]) {\n      result.push(left.shift());\n    } else {\n      result.push(right.shift());\n    }\n  }\n\n  while (left.length > 0) {\n    result.push(left.shift());\n  }\n  while (right.length > 0) {\n    result.push(right.shift());\n  }\n  return result;\n};\n\nconst mergeSort = function divideAndConquer(array) {\n  if (array.length === 1) {\n    return array;\n  }\n\n  let midIndex = Math.floor(array.length / 2);\n\n  let left = array.slice(0, midIndex);\n\n  let right = array.slice(midIndex);\n\n  let sortedLeft = mergeSort(left);\n  let sortedRight = mergeSort(right);\n\n  return merge(sortedLeft, sortedRight);\n};\n\nexport { mergeSort };\n","/**\n * Given a node and a value to search, compare that node's data to the value\n *\n * If the node's data is larger, perform the search on the left subtree\n *\n * If the node's data is smaller, perform the search on the right subtree\n *\n * If the node's data is equal, return that node\n *\n * If you run out of nodes, return \"not found\"\n */\n\nconst find = function binarySeach(root, value) {\n  if (root == null) {\n    return \"Not found\";\n  }\n  if (root.data === value) {\n    return root;\n  }\n\n  if (root.data > value) {\n    return find(root.left, value);\n  }\n\n  if (root.data < value) {\n    return find(root.right, value);\n  }\n};\n\nexport { find };\n","import { mergeSort } from \"./merge-sort\";\n\nconst node = function nodeFactory(data = null) {\n  const node = {};\n\n  node.left = null;\n  node.data = data;\n  node.right = null;\n\n  return node;\n};\n\nconst tree = function treeFactory(array) {\n  let tree = {};\n\n  let sortedArray = mergeSort(array);\n  console.log(sortedArray);\n\n  const length = array.length;\n\n  // The root is an object linking to all of its descendants\n  tree.root = buildTree(sortedArray, 0, length - 1);\n  return tree;\n};\n\nconst buildTree = function buildTreeFromArray(array, start, end) {\n  if (start > end) {\n    return null;\n  }\n\n  let mid = parseInt((start + end) / 2);\n  let newNode = node(array[mid]);\n\n  newNode.left = buildTree(array, start, mid - 1);\n  newNode.right = buildTree(array, mid + 1, end);\n\n  return newNode;\n};\n\nexport { node, tree, buildTree };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { preOrder, inOrder, postOrder } from \"./depth-first\";\n\nimport { tree } from \"./tree\";\n\nimport { insertValue, deleteValue } from \"./insert-delete\";\n\nimport { find } from \"./search\";\n\nimport { levelOrder, levelOrderRecursive } from \"./breadth-first\";\n\nconst dummy = function useless(node) {\n  console.log(`Callback for ${node}`);\n};\n\nlet array1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n\nconst newTree = tree(array1);\n\nconsole.log(newTree.root);\n\nconsole.log(preOrder(newTree.root, dummy));\n\nconsole.log(inOrder(newTree.root, dummy));\n\nconsole.log(postOrder(newTree.root, dummy));\n\n// insertValue(newTree.root, 15);\n\npreOrder(newTree.root);\n\ndeleteValue(newTree.root, 3);\n\npreOrder(newTree.root);\n\n// console.log(find(newTree.root, 4));\n\nlevelOrder(newTree.root);\n\nlevelOrderRecursive(newTree.root);\n"],"names":[],"sourceRoot":""}