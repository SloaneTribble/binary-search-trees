{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEqB;;;;;;;UCpCrB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNyC;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,sDAAS;AAC7B;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA","sources":["webpack://binary-search-trees/./src/merge-sort.js","webpack://binary-search-trees/webpack/bootstrap","webpack://binary-search-trees/webpack/runtime/define property getters","webpack://binary-search-trees/webpack/runtime/hasOwnProperty shorthand","webpack://binary-search-trees/webpack/runtime/make namespace object","webpack://binary-search-trees/./src/index.js"],"sourcesContent":["const merge = function mergeLeftAndRight(left, right) {\n  let result = [];\n  while (left.length > 0 && right.length > 0) {\n    if (left[0] < right[0]) {\n      result.push(left.shift());\n    } else {\n      result.push(right.shift());\n    }\n  }\n\n  while (left.length > 0) {\n    result.push(left.shift());\n  }\n  while (right.length > 0) {\n    result.push(right.shift());\n  }\n  return result;\n};\n\nconst mergeSort = function divideAndConquer(array) {\n  if (array.length === 1) {\n    return array;\n  }\n\n  let midIndex = Math.floor(array.length / 2);\n\n  let left = array.slice(0, midIndex);\n\n  let right = array.slice(midIndex);\n\n  let sortedLeft = mergeSort(left);\n  let sortedRight = mergeSort(right);\n\n  return merge(sortedLeft, sortedRight);\n};\n\nexport { mergeSort };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { mergeSort } from \"./merge-sort\";\n\nconst node = function nodeFactory(data = null) {\n  const node = {};\n\n  node.left = null;\n  node.data = data;\n  node.right = null;\n\n  return node;\n};\n\nconst tree = function treeFactory(array) {\n  let tree = {};\n\n  let sortedArray = mergeSort(array);\n  console.log(sortedArray);\n\n  const length = array.length;\n\n  tree.root = buildTree(sortedArray, 0, length - 1);\n  return tree;\n};\n\nconst buildTree = function buildTreeFromArray(array, start, end) {\n  if (start > end) {\n    return null;\n  }\n\n  let mid = parseInt((start + end) / 2);\n  let newNode = node(array[mid]);\n\n  newNode.left = buildTree(array, start, mid - 1);\n  newNode.right = buildTree(array, mid + 1, end);\n\n  return newNode;\n};\n\nlet array1 = [4, 6, 2, 67, 3, 1, 0];\n\nconst newTree = tree(array1);\n\nconsole.log(newTree);\n"],"names":[],"sourceRoot":""}